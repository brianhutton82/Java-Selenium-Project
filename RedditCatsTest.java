// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.chrome.ChromeOptions;

public class RedditCatsTest {

  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;

  @Before
  public void setUp() {
    System.setProperty("webdriver.chrome.driver", "Chrome/chromedriver-win32.exe");
    ChromeOptions options = new ChromeOptions();
    options.addArguments("--disable-notifications");
    options.addArguments("--disable-geolocation");
    driver = new ChromeDriver(options);
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
    driver.manage().window().setSize(new Dimension(1200, 800));
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }

  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void fUNTITLE() {
    // Test name: FUN-TITLE
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 518x664 | 
    driver.manage().window().setSize(new Dimension(518, 664));
    // 3 | mouseOver | css=.\_26j3FxU4jTfjqi8m96HMmI | 
    {
      WebElement element = driver.findElement(By.cssSelector(".\\_26j3FxU4jTfjqi8m96HMmI"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 4 | assertTitle | Cats | 
    assertThat(driver.getTitle(), is("Cats"));
  }
  @Test
  public void fUNRULE3() {
    // Test name: FUN-RULE-3
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1296x696 | 
    driver.manage().window().setSize(new Dimension(1296, 696));
    // 3 | mouseOver | css=.\_2RkQc9Gtsq3cPQNZLYv4zc | 
    {
      WebElement element = driver.findElement(By.cssSelector(".\\_2RkQc9Gtsq3cPQNZLYv4zc"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 4 | mouseOut | css=.\_2RkQc9Gtsq3cPQNZLYv4zc | 
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }
    // 5 | runScript | window.scrollTo(0,780) | 
    js.executeScript("window.scrollTo(0,780)");
    // 6 | runScript | window.scrollTo(0,1424) | 
    js.executeScript("window.scrollTo(0,1424)");
    // 7 | runScript | window.scrollTo(0,1786) | 
    js.executeScript("window.scrollTo(0,1786)");
    // 8 | mouseOver | linkText=Log In | 
    {
      WebElement element = driver.findElement(By.linkText("Log In"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 9 | assertText | css=.\_8ZLJI1-ZiP7pHJ_yO1L4Z:nth-child(3) .tbIApBd2DM_drfZQJjIum | No NSFW, animal abuse, or cruelty
    assertThat(driver.findElement(By.cssSelector(".\\_8ZLJI1-ZiP7pHJ_yO1L4Z:nth-child(3) .tbIApBd2DM_drfZQJjIum")).getText(), is("No NSFW, animal abuse, or cruelty"));
  }
  @Test
  public void fUNRULES11ITEMS() {
    // Test name: FUN-RULES-11-ITEMS
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1296x696 | 
    driver.manage().window().setSize(new Dimension(1296, 696));
    // 3 | runScript | window.scrollTo(0,830) | 
    js.executeScript("window.scrollTo(0,830)");
    // 4 | runScript | window.scrollTo(0,1516) | 
    js.executeScript("window.scrollTo(0,1516)");
    // 5 | runScript | window.scrollTo(0,1847.3333740234375) | 
    js.executeScript("window.scrollTo(0,1847.3333740234375)");
    // 6 | mouseOver | linkText=Log In | 
    {
      WebElement element = driver.findElement(By.linkText("Log In"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 7 | assertElementPresent | css=.\_8ZLJI1-ZiP7pHJ_yO1L4Z:nth-child(11) .\_36D5hmBSZbFxkFMkiWg6cY | 11
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".\\_8ZLJI1-ZiP7pHJ_yO1L4Z:nth-child(11) .\\_36D5hmBSZbFxkFMkiWg6cY"));
      assert(elements.size() > 0);
    }
    // 8 | assertElementNotPresent | css=.\_8ZLJI1-ZiP7pHJ_yO1L4Z:nth-child(12) .\_36D5hmBSZbFxkFMkiWg6cY | 12
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".\\_8ZLJI1-ZiP7pHJ_yO1L4Z:nth-child(12) .\\_36D5hmBSZbFxkFMkiWg6cY"));
      assert(elements.size() == 0);
    }
  }
  @Test
  public void fUNSORTBYCOMMENTS() {
    // Test name: FUN-SORT-BY-COMMENTS
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1296x696 | 
    driver.manage().window().setSize(new Dimension(1296, 696));
    // 3 | click | id=header-search-bar | 
    driver.findElement(By.id("header-search-bar")).click();
    // 4 | type | id=header-search-bar | catnip
    driver.findElement(By.id("header-search-bar")).sendKeys("catnip");
    // 5 | sendKeys | id=header-search-bar | ${KEY_ENTER}
    driver.findElement(By.id("header-search-bar")).sendKeys(Keys.ENTER);
    // 6 | click | css=.\_3yqn7UgWZCfM22Sk-rcBbs:nth-child(1) > .cmR5BF4NpBUm3DBMZCmJS | 
    driver.findElement(By.cssSelector(".\\_3yqn7UgWZCfM22Sk-rcBbs:nth-child(1) > .cmR5BF4NpBUm3DBMZCmJS")).click();
    // 7 | click | css=a:nth-child(5) .\_2-cXnP74241WI7fpcpfPmg | 
    driver.findElement(By.cssSelector("a:nth-child(5) .\\_2-cXnP74241WI7fpcpfPmg")).click();
    // 8 | assertText | xpath=//div[3]/span[2] | 286 comments
    assertThat(driver.findElement(By.xpath("//div[3]/span[2]")).getText(), is("286 comments"));
  }
  @Test
  public void fUNJOINBUTTONEXISTS() {
    // Test name: FUN-JOIN-BUTTON-EXISTS
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1296x696 | 
    driver.manage().window().setSize(new Dimension(1296, 696));
    // 3 | mouseOver | css=.\_2RkQc9Gtsq3cPQNZLYv4zc | 
    {
      WebElement element = driver.findElement(By.cssSelector(".\\_2RkQc9Gtsq3cPQNZLYv4zc"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 4 | assertText | css=.\_1Q_zPN5YtTLQVG72WhRuf3 > .\_1LHxa-yaHJwrPK8kuyv_Y4 | Join
    assertThat(driver.findElement(By.cssSelector(".\\_1Q_zPN5YtTLQVG72WhRuf3 > .\\_1LHxa-yaHJwrPK8kuyv_Y4")).getText(), is("Join"));
  }
  @Test
  public void fUNSIGNUPLINK() {
    // Test name: FUN-SIGNUP-LINK
    // Step # | name | target | value
    // 1 | open | /r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1296x696 | 
    driver.manage().window().setSize(new Dimension(1296, 696));
    // 3 | mouseOver | linkText=Log In | 
    {
      WebElement element = driver.findElement(By.linkText("Log In"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 4 | storeAttribute | css=.Z_HUY3BUsGOBOtdmH94ZS@href | signUp
    {
      WebElement element = driver.findElement(By.cssSelector(".Z_HUY3BUsGOBOtdmH94ZS"));
      String attribute = element.getAttribute("href");
      vars.put("signUp", attribute);
    }
    // 5 | echo | ${signUp} | 
    System.out.println(vars.get("signUp").toString());
    // 6 | assert | signUp | https://www.reddit.com/register/?dest=https%3A%2F%2Fwww.reddit.com%2Fr%2Fcats%2F
    assertEquals(vars.get("signUp").toString(), "https://www.reddit.com/register/?dest=https%3A%2F%2Fwww.reddit.com%2Fr%2Fcats%2F");
  }
}
